Dynamic Reconstruction in Isaac Sim
===================================

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nvblox/isaac_sim_dynamic_example.gif>`
   :align: center
   :width: 600px

This tutorial demonstrates how to perform general
dynamic reconstruction in nvblox with Isaac Sim.

The algorithm used for nvblox dynamic reconstruction is based on the following paper:

* | Lukas Schmid, Olov Andersson, Aurelio Sulser, Patrick Pfreundschuh, and Roland Siegwart.
  | "**Dynablox: Real-time Detection of Diverse Dynamic Objects in Complex Environments**"
  | in *IEEE Robotics and Automation Letters (RA-L)*,
    Vol. 8, No. 10, pp. 6259 - 6266, October 2023.
  | [ `IEEE <https://ieeexplore.ieee.org/document/10218983>`__ | `ArXiv <https://arxiv.org/abs/2304.10049>`__ | `Video <https://www.youtube.com/watch?v=NA13fRWlqRQ>`__]

For more about general dynamic reconstruction in nvblox see
:doc:`/concepts/scene_reconstruction/nvblox/technical_details`.

.. note::

   Due to a known issue, there is no animation of humans in the scene.

.. note::

  Dynamic reconstruction requires accurate pose estimation.
  Objects moving slower than the odometry drift can't be detected as dynamic.

Tutorial Walkthrough
--------------------

Before continuing this example, you must have successfully completed the
:doc:`tutorial_isaac_sim`.

.. note::

   This tutorial runs ``Isaac ROS Visual SLAM`` for pose estimation, instead
   of using the Isaac Sim poses, because of a known issue in Isaac Sim.

1. Open the Isaac Sim terminal and export the necessary environment variables
   as explained in steps 2-3 of the :doc:`Isaac Sim Setup Guide </getting_started/isaac_sim/index>`.

2. Start the simulation by running the following command in the terminal:

   .. code:: bash

    ./python.sh ${ISAAC_ROS_WS}/src/isaac_ros_nvblox/nvblox_examples/nvblox_isaac_sim/omniverse_scripts/start_isaac_sim.py --with_people --gpu_physics_enabled --scenario_path=/Isaac/Samples/NvBlox/carter_warehouse_navigation_with_dynamics.usd

   .. note::

      For more information on the ``start_isaac_sim`` script see the
      :ir_repo:`README <isaac_ros_nvblox> <nvblox_examples/nvblox_isaac_sim/omniverse_scripts/README.md>`.

3. *In another terminal*, run the ROS Docker container using the ``run_dev.sh`` script:

   .. code:: bash

    cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
      ./scripts/run_dev.sh

4.  Inside the container, install ``isaac_ros_visual_slam``

   :ir_apt:

   .. code:: bash

      sudo apt-get install -y ros-humble-isaac-ros-visual-slam

5. Launch the pre-composed graph launch file:

   .. code:: bash

    ros2 launch nvblox_examples_bringup isaac_sim_dynamics_example.launch.py run_vslam:=True global_frame:=odom_vslam


6. Use the **2D Goal Pose** button to navigate the robot around.

Troubleshooting
---------------

Refer to the
:doc:`/repositories_and_packages/isaac_ros_nvblox/isaac_ros_nvblox/troubleshooting/troubleshooting_nvblox_isaac_sim`.



RealSense Camera Examples
=================================

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nvblox/realsense_example.gif>`
    :width: 600px
    :align: center


This page contains tutorials for running nvblox on a
`RealSense <https://www.intel.com/content/www/us/en/architecture-and-technology/realsense-overview.html>`__
camera, :ir_repo:`Isaac ROS Visual SLAM <isaac_ros_visual_slam>`
and :ir_repo:`Isaac ROS Nvblox <isaac_ros_nvblox>`.

.. note::

   This tutorial requires a compatible RealSense camera from
   the list of available :doc:`cameras </getting_started/hardware_setup/sensors/realsense_setup>`.

RealSense Camera Firmware
-------------------------

This example is tested and compatible with RealSense camera firmware
`version 5.13.0.50 <https://dev.intelrealsense.com/docs/firmware-releases>`__.

.. note::

   The latest RealSense firmware
   (version 5.14 at the time of publishing) might have issues. Our recommendation is to install
   *exactly* `version 5.13.0.50 <https://dev.intelrealsense.com/docs/firmware-releases>`__.

.. todo::

    Test on a more recent version.

Prerequisites
-------------

These are the steps common to running all examples on RealSense.

1. Complete the :doc:`Realsense setup tutorial </getting_started/hardware_setup/sensors/realsense_setup>`.

2. Complete the :doc:`/getting_started/dev_env_setup`.

.. note::

    For best results we suggest increase maximum Linux kernel receive buffer size as
    detailed `here <https://docs.ros.org/en/rolling/How-To-Guides/DDS-tuning.html#cyclone-dds-tuning>`__.

Install
-------

1. Complete the :doc:`nvblox setup </concepts/scene_reconstruction/nvblox/setup/install_nvblox>`.

2. Stop Git tracking the ``COLCON_IGNORE`` file in the
   ``realsense_splitter`` package and remove it.

    .. code:: bash

        cd ${ISAAC_ROS_WS}/src/isaac_ros_nvblox/nvblox_examples/realsense_splitter && \
            git update-index --assume-unchanged COLCON_IGNORE && \
            rm COLCON_IGNORE

    .. note::

        Note: The ``COLCON_IGNORE`` file was added to remove the dependency
        to ``realsense-ros`` for users that don't want to run the RealSense
        examples.

3. Launch the Docker container using the ``run_dev.sh`` script (if not already launched):

    .. code:: bash

        cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
        ./scripts/run_dev.sh

4. Build the ``realsense_splitter`` package:

   .. code:: bash

       cd /workspaces/isaac_ros-dev
       colcon build --symlink-install --packages-up-to realsense_splitter
       source install/setup.bash

.. todo::

    Check that we can't have the RealSense splitter built by default in the Isaac ROS docker now.



Example ROSbag
--------------

If you want to run the examples in this tutorial from an example ROSbag (rather than from a live sensor),
we host a demo dataset which can be downloaded `here <https://drive.google.com/drive/u/1/folders/1m02mG5BZenVZo9sGv-sU32vKnaxKSUrU>`__.
The downloaded folder ``rosbag2_2023_10_09-11_48_00_0`` should be unzipped and placed somewhere
accessible inside the Isaac ROS docker, for example ``$ISAAC_ROS_WS/datasets``.

We set an environment variable (inside the Isaac ROS docker) to this dataset path for use
in the tutorials below. Note that this command assumes you've placed the downloaded dataset
in a folder called ``datasets`` next to the ``src`` folder. Adjust as required to match
your dataset path.

.. code::

    export DATASET_PATH=/workspaces/isaac_ros-dev/datasets/rosbag2_2023_10_09-11_48_00_0

.. todo::

    Move this dataset to NGC. Update the code to download from the command line.


RealSense Example
------------------

This example runs nvblox-based reconstruction from a single RealSense camera,
either from live data coming directly off a RealSense camera, or from recorded
data coming from a ROSbag.

1. Navigate (inside the docker) to the workspace folder

    .. code:: bash

        cd /workspaces/isaac_ros-dev

2. Run the RealSense example, either live from a sensor of from a recorded ROSbag.

    .. tabs::

        .. tab:: On a ROSbag

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py \
                from_bag:=True bag_path:=$DATASET_PATH
        
        .. tab:: Live from a sensor

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py

.. note::

   If you want to restrict odometry to a 2D plane
   (for example, to run a robot in a flat environment),
   you can use the ``flatten_odometry_to_2d`` argument.

Recording Data with RealSense
------------------------------

To record RealSense data for nvblox:

1. Connect the camera, start the Docker container and source the
   workspace as explained in :doc:`tutorial_realsense`.

2. Start recording:

   .. code:: bash

      ros2 launch nvblox_examples_bringup record_realsense.launch.py

3. Stop the recording when done

4. The resulting ROSbag can be run using the `instructions above <#realsense-example>`_.


Reconstruction With Humans
--------------------------

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nvblox/realsense_nvblox_humans.gif>`
    :width: 600px
    :align: center

This tutorial demonstrates how to perform dynamic human
reconstruction in nvblox using RealSense data. For more information on how
human reconstruction works, see
:doc:`/concepts/scene_reconstruction/nvblox/technical_details`.

.. note::

   If you are on a desktop machine, we recommend using the
   ``PeopleSemSegNet``.
   On Jetson platforms we recommend the lighter ``PeopleSemSegNet ShuffleSeg``
   model that is provided in :ir_repo:`Isaac ROS Image Segmentation <isaac_ros_image_segmentation>`
   for better segmentation performance.

1. Below we provide run instructions for both the full and light segmentation models (``PeopleSemSegNet`` and ``SuffleSeg``)
   respectively, running from both a ROSbag and live from a RealSense camera.

    .. tabs::

        .. tab:: PeopleSemSegNet (ROSbag)

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py \
                run_segmentation:=True \
                from_bag:=True bag_path:=$DATASET_PATH


        .. tab:: ShuffleSeg (ROSbag)

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py \
                run_segmentation:=True \
                segmentation_model_repository_paths:="['/workspaces/isaac_ros-dev/models']" \
                segmentation_model_name:=peoplesemsegnet_shuffleseg \
                segmentation_input_binding_names:="['input_2:0']" \
                from_bag:=True bag_path:=$DATASET_PATH


        .. tab:: PeopleSemSegNet (Live)

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py \
                run_segmentation:=True 

        .. tab:: ShuffleSeg (Live)

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py \
                run_segmentation:=True \
                segmentation_model_repository_paths:="['/workspaces/isaac_ros-dev/models']" \
                segmentation_model_name:=peoplesemsegnet_shuffleseg \
                segmentation_input_binding_names:="['input_2:0']"


Reconstruction With Dynamic elements
------------------------------------

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nvblox/realsense_dynamic_example.gif>`
    :width: 600px
    :align: center

This tutorial demonstrates how build a reconstruction with dynamic elements in the scene (human and non-human)
using RealSense data. For more information about how dynamic reconstruction works in nvblox see
:doc:`/concepts/scene_reconstruction/nvblox/technical_details`.

1. Below we provide run instructions for running from both a ROSbag and live from a RealSense camera.

    .. tabs::

        .. tab:: On a ROSbag

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py \
                run_dynamics:=True \
                from_bag:=True bag_path:=$DATASET_PATH


        .. tab:: Live from a sensor

            .. code:: bash

                ros2 launch nvblox_examples_bringup realsense_example.launch.py \
                run_dynamics:=True


Troubleshooting
---------------

See
:doc:`/repositories_and_packages/isaac_ros_nvblox/isaac_ros_nvblox/troubleshooting/troubleshooting_nvblox_realsense`.

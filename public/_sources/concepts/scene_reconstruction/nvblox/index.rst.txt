Nvblox
======

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nvblox/nvblox_fpv_mesh.gif>`
    :width: 600px
    :align: center

Nvblox is a library for reconstruction and mapping targeted at
robotics applications. It builds a voxel-based map from depth-images and/or
3D LiDAR scans. The library outputs a mesh of the world in real-time,
as well as a cost map for use in path planning. The library has been
used for navigating Autonomous Mobile Robots (AMRs) and for `motion
generation for robotic arms <https://ieeexplore.ieee.org/document/10160765>`_.
The library is optimized for discrete NVIDIA GPUs and Jetson devices.

Nvblox builds a reconstructed map in the form of a TSDF
(Truncated Signed Distance Function) stored in a 3D voxel grid. This
approach is similar to 3D occupancy grid mapping approaches in which
occupancy probabilities are stored at each voxel. However, TSDF-based
approaches like nvblox store the (signed) distance to the closest
surface at each voxel. The surface of the environment can then be
extracted as the zero-level set of this voxelized function. Typically,
TSDF-based reconstructions provide higher quality surface
reconstructions.

In addition to their use in (surface) reconstruction, distance fields
are also useful for path planning. In particular, they provide an
immediate means of checking potential future robot positions for
collisions with the reconstructed environment. Therefore, in addition
to the surface reconstruction (the TSDF), nvblox allows construction
of the full (non-truncated) distance field, typically called the ESDF
(Euclidean Signed Distance Function) in robotics literature.

The dual utility of distance functions for both reconstruction and
planning motivates their use in nvblox (a reconstruction library for
path planning).

If you want to know more about how nvblox works behind
the scenes refer to the :doc:`technical_details`.

.. toctree::
   :hidden:

   technical_details

Examples
---------

To get started with nvblox, check out the following suggested examples:

.. toctree::
   :glob:
   :maxdepth: 1

   tutorials/tutorial_isaac_sim
   tutorials/tutorial_realsense
   tutorials/tutorial_zed
   tutorials/tutorial_human_reconstruction_isaac_sim
   tutorials/tutorial_human_reconstruction_realsense
   tutorials/tutorial_dynamic_reconstruction_isaac_sim
   tutorials/tutorial_dynamic_reconstruction_realsense
   tutorials/tutorial_realsense_record

Repositories and Packages
-------------------------

The Isaac ROS implementations of this technology are available here:

* :doc:`Isaac ROS Nvblox </repositories_and_packages/isaac_ros_nvblox/index>`

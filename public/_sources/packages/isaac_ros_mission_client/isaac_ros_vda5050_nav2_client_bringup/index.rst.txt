==============
|package_name|
==============

Quickstart
----------

1.  Install and launch Isaac Sim following the steps in the `Isaac ROS
    Isaac Sim Setup
    Guide <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common/blob/main/docs/isaac-sim-sil-setup.md>`__
2.  Open the Isaac ROS Common USD scene (using the **content** window)
    located at:

    ``omniverse://localhost/NVIDIA/Assets/Isaac/2022.1/Isaac/Samples/ROS2/Scenario/carter_warehouse_apriltags_worker.usd``

    Wait for the scene to load completely.
.. note::

   To use a
   different server, replace ``localhost`` with
   ``<your_nucleus_server>``
3.  Press **Play** to start publishing data from Isaac Sim.

    
4.  Set up your development environment by following the instructions
    `here <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common/blob/main/docs/dev-env-setup.md>`__.

5.  Clone this repository and its dependencies under
    ``~/workspaces/isaac_ros-dev/src``.

    .. code:: bash

       cd ~/workspaces/isaac_ros-dev/src

    .. code:: bash

       git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common

    .. code:: bash

       git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_mission_client

6.  Start MQTT broker

    The MQTT broker is used for communication between the Mission
    Dispatch and the robots. There are many ways to run an MQTT broker,
    including as a system daemon, a standalone application, or a Docker
    container. Here we use ``mosquitto`` as our MQTT broker. Start the
    ``mosquitto`` broker by running the following:

    .. code:: bash

       cd ~/workspaces/isaac_ros-dev/src/isaac_ros_mission_client
       docker run -it --network host -v ${PWD}/utils/mosquitto.sh:/mosquitto.sh -d eclipse-mosquitto:latest sh mosquitto.sh 1883 9001

7.  Launch the Docker container using the ``run_dev.sh`` script:

    .. code:: bash

       cd ~/workspaces/isaac_ros-dev/src/isaac_ros_common && \
         ./scripts/run_dev.sh

8.  Inside the container, build and source the workspace:

    .. code:: bash

       cd /workspaces/isaac_ros-dev && \
         colcon build --symlink-install && \
         source install/setup.bash

9.  (Optional) Run tests to verify complete and correct installation:

    .. code:: bash

       colcon test --executor sequential

10. Run the following launch files to spin up ``mission_client`` and
    Nav2:

    .. code:: bash

       ros2 launch isaac_ros_vda5050_nav2_client_bringup isaac_ros_vda5050_nav2_client.launch.py

11. Start `Mission
    Dispatch <https://github.com/NVIDIA-ISAAC/isaac_mission_dispatch>`__
    with Docker.

    -  Postgres database

       Set the following environment variable:

       .. code:: bash

          export POSTGRES_PASSWORD=<Any password>

       Start the Postgres database by running the following:

       .. code:: bash

          docker run --rm --name postgres \
            --network host \
            -p 5432:5432 \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD \
            -e POSTGRES_DB=mission \
            -d postgres:14.5

    -  Launch the Mission Database microservice:

       Start the API and database server with the official Docker
       container.

       .. code:: bash

          docker run -it --network host nvcr.io/nvidia/isaac/mission-database:2022.10.17_de4892b

          # To see what configuration options are, run
          # docker run -it --network host nvcr.io/nvidia/isaac/mission-database:2022.10.17_de4892b --help
          # For example, if you want to change the port for the user API from the default 5000 to 5002, add `--port 5002` configuration option in the command.

    -  Launch the Mission Dispatch microservice:

       Start the Mission Dispatch server with the official Docker
       container.

       .. code:: bash

          docker run -it --network host nvcr.io/nvidia/isaac/mission-dispatch:2022.10.17_de4892b

          # To see what configuration options are, add --help option after the command.

       ..

          .. note::

          Read `this
          tutorial <https://github.com/NVIDIA-ISAAC/isaac_mission_dispatch#getting-started-with-deployment-recommended>`__
          for more deployment options for Mission Dispatch.

12. Open ``http://localhost:5000/docs`` in a web browser.
13. Use the ``POST /robots`` endpoint to create robot objects. See the
    video below for exact steps.
14. Get the status of the robots using the ``GET /robots`` endpoint. If
    the robots are connected, the state should reflect the actual
    position of the robots.

    https://user-images.githubusercontent.com/77975110/196787009-4e19199c-deb7-4bee-9f21-bda06b4791b0.mp4
    
.. note::

   When using the interactive documentation page, the
   default value for the the robot object ``name`` in the ``spec`` is
   ‘string’, so make sure to change it from ‘string’ to another name
   that has more meaning, like ‘carter01’. Make sure to delete the
   ``prefix`` entry as shown in the video.

15. Send a mission to the robot using the ``POST /missions`` endpoint.
    See the video below for exact steps.

    https://user-images.githubusercontent.com/77975110/196791774-060749d6-4274-4d6d-8380-cff6207bfed6.mp4

       .. note::

       By default, the value for the ``robot`` is ‘string’, so
       make sure to change it to the ``name`` you used for one of the
       robot objects you created earlier. For example, if you set the
       ``name`` of the robot object to ‘carter01’, use that to fill in
       the ``robot`` field for the mission. Also make sure to delete the
       ``prefix``, ``selector``, ``sequence`` and ``action`` entries as
       shown in the video.

    ..

       .. note::

       Mission Client cannot cancel or update a running
       mission and will disregard incoming missions if it is busy.

16. Go back to the Isaac Sim screen. You should see the robot move to
    the set goal position, as shown below.

API
----

isaac_ros_mission_client
~~~~~~~~~~~~~~~~~~~~~~~~

This launch script under the launch directory brings up the MQTT bridge
nodes and the VDA5050 Nav2 Client node.

Usage
^^^^^

.. code:: bash

   ros2 launch isaac_ros_vda5050_nav2_client_bringup isaac_ros_vda5050_client.launch.py namespace:=<"namespace for ros graph"> mqtt_host_name:=<"mqtt_host_name"> mqtt_transport:=<"mqtt_transport"> mqtt_pub_topic:=<"mqtt_pub_topic"> ros_subscriber_type:=<"ros_subscriber_type"> ros_to_mqtt_name:=<"ros_to_mqtt_name"> mqtt_sub_topic:=<"mqtt_sub_topic"> ros_publisher_type:=<"ros_publisher_type"> mqtt_to_ros_name:=<"mqtt_to_ros_name">

ROS Parameters
^^^^^^^^^^^^^^

======================= ========== ============================ ==============================================================================================================================================================
ROS Parameter           Type       Default                      Description
======================= ========== ============================ ==============================================================================================================================================================
``namespace``           ``string`` ``""(Empty string)``         The ROS namespace used for the ROS graph. e.g. \ ``carter``
``mqtt_host_name``      ``string`` ``localhost``                The MQTT broker IP to connect to. e.g. \ ``192.168.25.32``
``mqtt_port``           ``string`` ``1883``                     The MQTT broker port
``mqtt_transport``      ``string`` ``tcp``                      The protocol to use for sending MQTT messages (either ``tcp`` or ``websockets``)
``mqtt_ws_path``        ``string`` ``''``                       The path for the websocket if the protocol set in ``mqtt_transport`` is ``websockets``
``mqtt_pub_topic``      ``string`` ``/uagv/v1/carter01/state``  The MQTT topic to publish MQTT messages
``mqtt_sub_topic``      ``string`` ``/uagv/v1/carter01/order``  The MQTT topic to subscribe for incoming MQTT messages
``ros_publisher_type``  ``string`` ``vda5050_msgs/Order``       The ROS message type to convert incoming MQTT messages to
``ros_subscriber_type`` ``string`` ``vda5050_msgs/AGVState``    The ROS message type that outgoing MQTT message are converted from
``ros_to_mqtt_name``    ``string`` ``Carter01_RosToMqttBridge`` The MQTT client name for the RosToMqtt Node
``mqtt_to_ros_name``    ``string`` ``Carter01_MqttToRosBridge`` The MQTT client name for the MqttToRos Node
``retry_forever``       ``bool``   ``true``                     Retry connecting forever if connection to MQTT message broker is not established
``reconnect_period``    ``int``    ``5``                        The period of time to wait before retrying to connect to MQTT message broker (in seconds)
``num_retries``         ``int``    ``10``                       The number of reconnection retries to connect to the MQTT message broker before giving up. This setting is only valid if ``retry_forever`` is set to ``false``
``ros_recorder``        ``bool``   ``false``                    Launches `isaac_ros_scene_recorder <./isaac_ros_scene_recorder/>`__ if set to ``true``
======================= ========== ============================ ==============================================================================================================================================================



Usage
^^^^^

To run Mission Client with the recorder, set the ``ros_recorder`` launch
file parameter to ``true``.

.. code:: bash

   ros2 launch isaac_ros_vda5050_nav2_client_bringup isaac_ros_vda5050_nav2_client.launch.py ros_recorder:=true

or

.. code:: bash

   ros2 launch isaac_ros_vda5050_nav2_client_bringup isaac_ros_vda5050_client.launch.py ros_recorder:=true

To start the recorder, post a mission from mission dispatch. Here is an
example mission:

.. code:: json

   {
     "robot": "carter01",
     "mission_tree": [
       {
         "name": "string",
         "parent": "root",
         "action": {
           "action_type": "start_recording",
           "action_parameters": {"path": "/tmp/data", "topics": "/rgb_left", "time":3}
         }
       }
     ],
     "timeout": 300,
     "deadline": "2022-10-07T00:21:31.112Z",
     "needs_canceled": false,
     "name": "mission01"
   }

The ``action_type`` should be ``start_recording`` and the parameters
``path, topics, time`` are required. The recorder will save data
published by ``topics`` in folder ``path`` for ``time`` seconds.

To stop the recorder, post a mission with action of type
``stop_recording`` from Mission Dispatch. Here is an example:

.. code:: json

   {
     "robot": "carter01",
     "mission_tree": [
       {
         "name": "string",
         "parent": "root",
         "action": {
           "action_type": "stop_recording"
         }
       }
     ],
     "timeout": 300,
     "deadline": "2022-10-07T00:21:31.112Z",
     "needs_canceled": false,
     "name": "mission02"
   }

.. |package_name| replace:: ``isaac_ros_vda5050_nav2_client_bringup``
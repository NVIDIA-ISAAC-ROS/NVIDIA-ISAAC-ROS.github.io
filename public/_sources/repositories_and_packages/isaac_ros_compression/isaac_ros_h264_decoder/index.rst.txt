==============
|package_name|
==============

:ir_github:`<isaac_ros_compression> <isaac_ros_h264_decoder>`


Quickstart
----------

This quickstart shows an example of how to use the
``isaac_ros_h264_decoder`` with a pre-recorded rosbag, which contains
compressed H.264 images generated from ``isaac_ros_h264_encoder`` with
two Argus cameras as the input source. You will be able to visualize the
decoded images after the last step.

Set Up Development Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /_snippets/set_up_dev_env.rst

Download Quickstart Assets
^^^^^^^^^^^^^^^^^^^^^^^^^^

1. Download quickstart data from NGC:

   :ir_assets:`<isaac_ros_h264_decoder> <quickstart.tar.gz>`

Build |package_name|
^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. tab:: Binary Package

      1. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      2. Install the prebuilt Debian package:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-h264-decoder
   
   .. tab:: Build from Source

      1. Clone this repository under ``${ISAAC_ROS_WS}/src``:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src && \
               git clone :ir_clone:`<isaac_ros_compression>`
     
      2. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      3. Use ``rosdep`` to install the package's dependencies:

         :ir_apt:

         .. code:: bash

            rosdep install --from-paths ${ISAAC_ROS_WS}/src/isaac_ros_compression/isaac_ros_h264_decoder --ignore-src -y

      4. Build the package from source:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/ && \
               colcon build --symlink-install --packages-up-to isaac_ros_h264_decoder

      5. Source the ROS workspace:

         .. note::

            Make sure to repeat this step in **every** terminal created inside the Docker container.
            
            Because this package was built from source, the enclosing workspace must be sourced for ROS to be able to find the package's contents.

         .. code:: bash

            source install/setup.bash

Run Launch File
^^^^^^^^^^^^^^^

.. tabs::

   .. tab:: Rosbag

      #. Continuing inside the Docker container, install the following dependencies:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-examples

      #. Run the following launch file to spin up a demo of this package using the quickstart rosbag:

         .. code:: bash

             ros2 launch isaac_ros_examples isaac_ros_examples.launch.py launch_fragments:=stereo_h264_decoder

      #. Open a **second** terminal inside the Docker container:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      #. Run the rosbag file to simulate an image stream:

         .. code:: bash

            ros2 bag play -l ${ISAAC_ROS_WS}/isaac_ros_assets/isaac_ros_h264_decoder/quickstart.bag

Visualize Results
^^^^^^^^^^^^^^^^^

1. Open a **new** terminal inside the Docker container:

   .. code:: bash

      cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
         ./scripts/run_dev.sh

2. Visualize and validate the output of the package:

   .. code:: bash

      ros2 run image_view image_view --ros-args -r image:=/left/image_uncompressed

   .. code:: bash

      ros2 run image_view image_view --ros-args -r image:=/right/image_uncompressed

Try More Examples
-----------------

To continue your exploration, check out the following suggested examples:

.. toctree::
   :maxdepth: 1
      
   Tutorial with Compatible Decoder </concepts/compression/h264/tutorial_compatible_decode>


Troubleshooting
---------------

Symptom
^^^^^^^

Launching the decoder node using
``ros2 launch isaac_ros_h264_decoder isaac_ros_h264_decoder_rosbag.launch.py``,
produces the below error message:

x86_64 Platform:

.. code:: bash

   [component_container_mt-2] 2023-04-04 22:19:02.609 WARN  /workspaces/isaac_ros-dev/ros_ws/src/isaac_ros_compression/isaac_ros_h264_decoder/gxf/codec/components/decoder.cpp@310: Decoder output is empty, current frame will be dropped

Jetson Platform:

.. code:: bash

   [component_container_mt-2] 2023-04-04 06:39:57.766 WARN  gxf/std/greedy_scheduler.cpp@235: Error while executing entity 20 named 'KIWPUYFVJT_decoder_response': GXF_FAILURE
   [component_container_mt-2] [ERROR] (/usr/src/jetson_multimedia_api/samples/common/classes/NvV4l2ElementPlane.cpp:178) <dec0> Capture Plane:Error while DQing buffer: Invalid argument
   [component_container_mt-2] 2023-04-04 06:39:57.766 ERROR /workspaces/isaac_ros-dev/ros_ws/src/isaac_ros_compression/isaac_ros_h264_decoder/gxf/codec/components/decoder_request.cpp@530: Failed to dequeue buffer from capture plane
   [component_container_mt-2] 2023-04-04 06:39:57.766 ERROR gxf/std/entity_executor.cpp@509: Failed to tick codelet  in entity: KIWPUYFVJT_decoder_response code: GXF_FAILURE
   [component_container_mt-2] 2023-04-04 06:39:57.766 ERROR gxf/std/entity_executor.cpp@203: Entity with eid 35 not found!

Solution
^^^^^^^^

You may see these errors when decoder receives P-frames first. Decoder
can not decode P-frames until it has received the first I-frame. You can
start the decoder before playing the rosbag to avoid these errors.


API
----

Usage
^^^^^

.. code:: bash

   ros2 launch isaac_ros_h264_decoder isaac_ros_h264_decoder.launch.py


ROS Parameters
^^^^^^^^^^^^^^


ROS Topics Subscribed
^^^^^^^^^^^^^^^^^^^^^

==================== =========================================================================================================================== ==========================
ROS Topic            Interface                                                                                                                   Description
==================== =========================================================================================================================== ==========================
``image_compressed`` `sensor_msgs/CompressedImage <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/CompressedImage.msg>`__ The H.264 compressed image
==================== =========================================================================================================================== ==========================

ROS Topics Published
^^^^^^^^^^^^^^^^^^^^

====================== ======================================================================================================= ==========================================
ROS Topic              Type                                                                                                    Description
====================== ======================================================================================================= ==========================================
``image_uncompressed`` `sensor_msgs/Image <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/Image.msg>`__ The uncompressed image with RGB8 encoding.
====================== ======================================================================================================= ==========================================


Output Interpretations
^^^^^^^^^^^^^^^^^^^^^^

1. The ``isaas_ros_h264_decoder`` package outputs a uncompressed image
   with the same resolution as the original image. The output image will
   be in ``RGB8`` format.


.. |package_name| replace:: ``isaac_ros_h264_decoder``
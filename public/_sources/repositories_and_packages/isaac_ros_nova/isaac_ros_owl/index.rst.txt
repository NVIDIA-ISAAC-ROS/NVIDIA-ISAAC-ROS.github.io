==============
|package_name|
==============

:ir_github:`<isaac_ros_nova> <isaac_ros_owl>`

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nova/li_owl_ar0234cs.png>`
   :align: center

Overview
--------

A camera provides images using an electronic image sensor as part of perception for understanding of the robot and its environment.

The ``isaac_ros_owl`` driver provides support for the ``LI-AR0234CS-GMSL2-OWL`` camera. This provides an ultra wide-angle (>200 degree) field of view with global shutter HD (1920x1200) color imager. Global shutter enables light sensing in the imager for all pixels simultaneously, reducing motion artifacts caused by rolling-shutter imagers which capture a row of pixels at a time. Color is used for AI-based perception functions. The ultra wide-angle lens provides a hemispherical image useful for perception of the environment near the robot, and for teleoperation applications to provide the remote robot operator with visibility near the robot. ``LI-AR0234CS-GMSL2-OWL`` is jointly developed with Leopard Imaging and NVIDIA.

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nova/li_owl_ar0234cs_visual.jpg>`
   :align: center
   
   Example image captured using ``LI-AR0234CS-GMSL2-OWL`` with long exposure.

Quickstart
----------

Set Up Development Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /_snippets/set_up_dev_env.rst

Build |package_name|
^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. tab:: Binary Package

      1. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      2. Install the prebuilt Debian package:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-owl
   
   .. tab:: Build from Source

      1. Clone this repository under ``${ISAAC_ROS_WS}/src``:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src && \
               git clone :ir_clone:`<isaac_ros_nova>`
     
      2. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      3. Use ``rosdep`` to install the package's dependencies:

         :ir_apt:

         .. code:: bash

            rosdep install --from-paths ${ISAAC_ROS_WS}/src/isaac_ros_nova/isaac_ros_owl --ignore-src -y

      4. Build the package from source:

         .. code:: bash

            cd ${ISAAC_ROS_WS} && \
               colcon build --symlink-install --packages-up-to isaac_ros_owl

      5. Source the ROS workspace:

         .. note::

            Make sure to repeat this step in **every** terminal created inside the Docker container.
            
            Because this package was built from source, the enclosing workspace must be sourced for ROS to be able to find the package's contents.

         .. code:: bash

            source install/setup.bash

Run Launch File
^^^^^^^^^^^^^^^

1. Continuing inside the Docker container, launch the OWL driver:

   .. code-block::

      ros2 launch isaac_ros_owl owl.launch.py

Visualize Results
^^^^^^^^^^^^^^^^^

1. Open a **new** terminal inside the Docker container:

   .. code:: bash

      cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
         ./scripts/run_dev.sh

2. Use ``image_saver`` to save the output images:

   .. code:: bash

      ros2 run image_view image_saver --ros-args -r image:=/fisheye_camera/left/image_raw -p filename_format:="image.jpg"

Troubleshooting
---------------

Isaac ROS Troubleshooting
^^^^^^^^^^^^^^^^^^^^^^^^^

For solutions to problems with Isaac ROS, see :doc:`troubleshooting </troubleshooting/index>`.

API
----

Usage
^^^^^

.. code:: bash

   ros2 launch isaac_ros_owl owl.launch.py target_container:=<Target Container> namespace:=<Namespace> camera_id:=<System device numeral for the camera. For example select 0 for /dev/video0.> mode:=<Supported Resolution mode from the camera. For example, 0: 1920 x 1200> fsync_type:=<Specifies what kind of Frame Synchronization to use. Supported values are: 0 for internal, 1 for external.> nvpps_dev_file:=<NVPPS Dev Name> use_time_since_epoch:=<Use Time Since Epoch>

OwLNode
^^^^^^^

ROS Parameters
~~~~~~~~~~~~~~

=========================== ================ =================== ===========================================================================================================================================================================================
ROS Parameter               Type             Default             Description
=========================== ================ =================== ===========================================================================================================================================================================================
``camera_id``               ``uint``         ``0``               The video device index E.g. ``/dev/video0``
``module_id``               ``uint``         ``0``               The camera module index in the device tree when there is more than one of the same camera module connected
``mode``                    ``uint``         ``0``               The resolution mode supported by the camera sensor and driver.
``fsync_type``              ``uint``         ``1``               Specifies what kind of Frame Synchronization to use, supported values are 0 for internal and 1 for external. For e3653 boards (carter 2.3) choose 0, for p3762 boards (carter 2.4) choose 1
``camera_link_frame_name``  ``string``       ``camera``          The frame name associated with the origin of the camera body.
``optical_frame_name``      ``string``       ``left_cam``        The frame name associated with the imager inside camera body (for monocular camera).
``camera_info_url``         ``string``       N/A                 Optional URL of a camera info ``.ini`` file to read intrinsic information.
=========================== ================ =================== ===========================================================================================================================================================================================

ROS Topics Subscribed
~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - ROS Topic
     - Interface
     - Description

   * - ``correlated_timestamp``
     - :ir_repo:`isaac_ros_nova_interfaces::msg::CorrelatedTimestamp <isaac_ros_common> <isaac_ros_nova_interfaces/msg/CorrelatedTimestamp.msg>`
     - Timestamp correlation data.

ROS Topics Published
~~~~~~~~~~~~~~~~~~~~

==================== ================================================================================================================= =================================
ROS Topic            Interface                                                                                                         Description
==================== ================================================================================================================= =================================
``left/image_raw``   `sensor_msgs/Image <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/Image.msg>`__           The OWL image.
``left/camera_info`` `sensor_msgs/CameraInfo <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/CameraInfo.msg>`__ The OWL camera info.
==================== ================================================================================================================= =================================

.. |package_name| replace:: ``isaac_ros_owl``

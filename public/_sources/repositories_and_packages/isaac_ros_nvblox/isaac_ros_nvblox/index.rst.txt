==============
|package_name|
==============

:ir_github:`<isaac_ros_nvblox> <isaac_ros_nvblox>`

A meta-package containing the relevant nvblox ROS 2 packages.

Quickstart
----------

1.  Complete the :doc:`/getting_started/dev_env_setup`.

2.  Clone this repository and its dependencies under
    ``~/workspaces/isaac_ros-dev/src``.

    .. code:: bash

       cd ~/workspaces/isaac_ros-dev/src

    .. code:: bash

       git clone :ir_clone:`<isaac_ros_common>`

    .. code:: bash

       git clone --recurse-submodules :ir_clone:`<isaac_ros_nvblox>` && \
           cd isaac_ros_nvblox && git lfs pull

3.  Pull down a ROS Bag of sample data:

    .. code:: bash

       cd ~/workspaces/isaac_ros-dev/src/isaac_ros_nvblox && \
         git lfs pull -X "" -I "nvblox_ros/test/test_cases/rosbags/nvblox_pol"

4.  Launch the Docker container using the ``run_dev.sh`` script:

    .. code:: bash

       cd ~/workspaces/isaac_ros-dev/src/isaac_ros_common && \
         ./scripts/run_dev.sh

5.  Inside the container, install package-specific dependencies via
    ``rosdep``:

    .. code:: bash

       cd /workspaces/isaac_ros-dev/ && \
           rosdep install -i -r --from-paths src --rosdistro humble -y --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv nvblox"

6.  Build and source the workspace:

    .. code:: bash

       cd /workspaces/isaac_ros-dev && \
         colcon build --symlink-install && \
         source install/setup.bash

7.  (Optional) Run tests to verify complete and correct installation:

    .. code:: bash

       colcon test --executor sequential

8.  In a **current terminal** inside the Docker container, run the
    launch file for Nvblox with ``nav2``:

    .. code:: bash

       source /workspaces/isaac_ros-dev/install/setup.bash && \
           ros2 launch nvblox_examples_bringup isaac_sim_example.launch.py

9.  Open a **second terminal** inside the docker container:

    .. code:: bash

       cd ~/workspaces/isaac_ros-dev/src/isaac_ros_common && \
         ./scripts/run_dev.sh

10. In the **second terminal**, play the ROS Bag:

    .. code:: bash

       ros2 bag play src/isaac_ros_nvblox/nvblox_ros/test/test_cases/rosbags/nvblox_pol

You should see the robot reconstructing a mesh, with the 2d ESDF slice
overlaid on top.

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nvblox/basic_example_rviz.png>`
    :width: 600px
    :align: center

Try More Examples
-----------------

To continue your exploration, check out the following suggested nvblox examples:

======================================== ======================================================================================= ========================================================================================
Launch file                              Arguments                                                                               Description
======================================== ======================================================================================= ========================================================================================
``isaac_sim_example.launch.py``          ``run_nav2``, ``run_rviz``, ``run_vslam``, ``global_frame``                             Example to run with Isaac Sim (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_isaac_sim>`)
``isaac_sim_humans_example.launch.py``   ``run_nav2``, ``run_rviz``, ``run_vslam``, ``global_frame``                             Example to run with Isaac Sim including human reconstruction (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_human_reconstruction_isaac_sim>`)
``isaac_sim_dynamics_example.launch.py`` ``run_nav2``, ``run_rviz``, ``run_vslam``, ``global_frame``                             Example to run with Isaac Sim including general dynamic reconstruction (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_dynamic_reconstruction_isaac_sim>`)
``realsense_example.launch.py``          ``from_bag``, ``bag_path``,  ``run_rviz``, ``flatten_odometry_to_2d``, ``global_frame`` Example to run with a RealSense camera (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_realsense>`)
``realsense_humans_example.launch.py``   ``from_bag``, ``bag_path``,  ``run_rviz``, ``flatten_odometry_to_2d``, ``global_frame`` Example to run with a RealSense camera including human reconstruction (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_human_reconstruction_realsense>`)
``realsense_dynamics_example.launch.py`` ``from_bag``, ``bag_path``,  ``run_rviz``, ``flatten_odometry_to_2d``, ``global_frame`` Example to run with a RealSense camera including general dynamic reconstruction (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_dynamic_reconstruction_realsense>`)
``record_realsense.launch.py``           ``launch_realsense``, ``run_rqt``                                                       Record RealSense data to replay with the above examples (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_realsense_record>`)
``zed_example.launch.py``                ``from_bag``, ``bag_path``,  ``run_rviz``, ``global_frame``                             Example to run with a ZED camera (:doc:`tutorial </concepts/scene_reconstruction/nvblox/tutorials/tutorial_zed>`)
======================================== ======================================================================================= ========================================================================================

API
----

.. toctree::
    :glob:
    :maxdepth: 2

    api/*


Troubleshooting
---------------

.. toctree::
    :glob:
    :maxdepth: 1

    troubleshooting/*

.. |package_name| replace:: ``isaac_ros_nvblox``

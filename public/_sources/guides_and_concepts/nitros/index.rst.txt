======
NITROS
======


System Assumptions
------------------

The design of NITROS makes the following assumptions of the ROS 2
applications:

-  To leverage the benefit of zero-copy in NITROS, all
   NITROS-accelerated nodes must run in the same process.
-  For a given topic in which type negotiation takes place, there can
   only be one negotiating publisher.
-  For a NITROS-accelerated node, received-frame IDs are assumed to be
   constant throughout the runtime.

NITROS-Accelerated Nodes
------------------------

Most Isaac ROS GEMs have been updated to be NITROS-accelerated. The
acceleration is in effect between NITROS-accelerated nodes when two or
more of them are connected next to each other. In such a case,
NITROS-accelerated nodes can discover each other through type
negotiation and leverage type adaptation for data transmission
automatically at runtime.

NITROS-accelerated nodes are also compatible with non-NITROS nodes: A
NITROS-accelerated node can be used together with any existing,
non-NITROS ROS 2 node, and it will function like a typical ROS 2 node.

NITROS Data Types
-----------------

NITROS supports transporting various common data types with zero-copy in
its own NITROS types. Each NITROS type is one-to-one-mapped to a ROS
message type, which ensures compatibility with existing tools,
workflows, and codebases. A non-NITROS node supporting the corresponding
ROS message types can publish data to or subscribe to data from a
NITROS-accelerated node that supports the corresponding NITROS types.

============================ ======================================================================================================================================================================================
NITROS Interface             ROS Interface
============================ ======================================================================================================================================================================================
NitrosImage                  `sensor_msgs/Image <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/Image.msg>`__
NitrosCameraInfo             `sensor_msgs/CameraInfo <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/CameraInfo.msg>`__
NitrosTensorList             `isaac_ros_tensor_list_interfaces/TensorList <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common/blob/main/isaac_ros_tensor_list_interfaces/msg/TensorList.msg>`__
NitrosDisparityImage         `stereo_msgs/DisparityImage <https://github.com/ros2/common_interfaces/blob/humble/stereo_msgs/msg/DisparityImage.msg>`__
NitrosPointCloud             `sensor_msgs/PointCloud2 <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/PointCloud2.msg>`__
NitrosAprilTagDetectionArray `isaac_ros_apriltag_interfaces/AprilTagDetectionArray <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common/blob/main/isaac_ros_apriltag_interfaces/msg/AprilTagDetectionArray.msg>`__
NitrosPoseCovStamped         `geometry_msgs/PoseWithCovariance <https://github.com/ros2/common_interfaces/blob/humble/geometry_msgs/msg/PoseWithCovariance.msg>`__
============================ ======================================================================================================================================================================================

NITROS-Accelerated Graphs
-------------------------

ROS 2 graphs built with NITROS-accelerated nodes yield promising
performance. The following highlights three graphs that are created and
tested fully with Isaac ROS NITROS-accelerated nodes. For more detailed
performance outcomes, visit `this
page <https://github.com/NVIDIA-ISAAC-ROS/.github/blob/main/profile/performance-summary.md>`__.

AprilTag Detection Graph
~~~~~~~~~~~~~~~~~~~~~~~~

The AprilTag detection graph uses the NVIDIA GPU-accelerated AprilTags
library to detect AprilTags in images and publishes their poses, IDs,
and additional metadata. Visit `Isaac ROS
Apriltag <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_apriltag>`__ for
more details.

.. mermaid::

   graph LR;
       argus_node("ArgusMonoNode (Raw Image)") --> rectify_node("RectifyNode (Rectified Image)");
       rectify_node --> apriltag_node("AprilTagNode (AprilTag Detection)");

Stereo Disparity Graph
~~~~~~~~~~~~~~~~~~~~~~

The stereo disparity graph performs DNN-based stereo depth estimation
via continuous disparity prediction. It produces a depth image or point
cloud of the scene that can be used for robot navigation. Visit `Isaac
ROS DNN Stereo
Disparity <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_dnn_stereo_disparity>`__
for more details.

.. mermaid::

   graph LR;
       argus_node("ArgusStereoNode (Raw Image)") --> left_rectify_node("RectifyNode (Rectified Image)");
       argus_node --> right_rectify_node("RectifyNode (Rectified Image)");
       left_rectify_node --> ess_node("ESSDisparityNode (DNN Inference)");
       right_rectify_node --> ess_node;
       ess_node --> point_cloud_point("PointCloudNode (Point Cloud Output)");

Image Segmentation Graph
~~~~~~~~~~~~~~~~~~~~~~~~

The image segmentation graph uses a deep learning U-Net model to
generate an image mask segmenting out objects of interest. Visit `Isaac
ROS Image
Segmentation <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_image_segmentation>`__
for more details.

.. mermaid::

   graph LR;
       argus_node("ArgusMonoNode (Raw Image)") --> rectify_node("RectifyNode (Rectified Image)");
       rectify_node --> encoder_node("DnnImageEncoderNode (DNN Pre-Processed Tensors)");
       encoder_node --> triton_node("TritonNode (DNN Inference)");
       triton_node --> unet_decoder_node("UNetDecoderNode (Segmentation Image)");

Creating Graphs with NITROS-Accelerated Nodes
---------------------------------------------

Besides the above fully tested graphs, it is also possible to construct
your own graphs with any of the Isaac ROS NITROS-accelerated nodes to
enjoy the performance benefit of NITROS.

The key to successfully constructing a NITROS-accelerated graph is to
ensure that all NITROS-accelerated nodes start in the same process
(which permits zero-copy between nodes). To do so, follow the steps
below to create your own launch file:

1. Create a Python ROS 2 launch file following the official
   `guide <https://docs.ros.org/en/humble/How-To-Guides/Launching-composable-nodes.html>`__.

2. Create NITROS-accelerated nodes using ``ComposableNode``. Taking
   ``ArgusMonoNode`` and ``RectifyNode`` as an example, the nodes can be
   created as follows:

   .. code:: python

      argus_mono_node = ComposableNode(
          name='argus_mono_node',
          package='isaac_ros_argus_camera',
          plugin='nvidia::isaac_ros::argus::ArgusMonoNode',
      )

      rectify_node = ComposableNode(
          name='rectify_node',
          package='isaac_ros_image_proc',
          plugin='nvidia::isaac_ros::image_proc::RectifyNode',
          parameters=[{
              'output_width': 1920,
              'output_height': 1200,
          }],
          remapping=[
              ('image_raw', 'left/image_raw'),
              ('camera_info', 'left/camerainfo')
          ],
      )

3. Place the created nodes in ``ComposableNodeContainer``:

   .. code:: python

      nitros_container = ComposableNodeContainer(
          name='nitros_container',
          package='rclcpp_components',
          executable='component_container_mt',
          composable_node_descriptions=[argus_mono_node, rectify_node],
      )

   ..

      **Note:** It is crucial that the ``executable`` field is set to be
      ``component_container_mt`` so that the created nodes can be
      started and communicated correctly within the same process.

4. Finally, place the created composable node container in
   ``LaunchDescription`` to finalize the launch script.

   .. code:: python

      return launch.LaunchDescription([nitros_container])

Using NITROS-Accelerated Nodes in Existing Non-NITROS Graphs
------------------------------------------------------------

As stated in `NITROS-Accelerated Nodes`__,
it is also possible to use any NITROS-accelerated nodes in an existing
ROS 2 graph, as all Isaac ROS nodes are compatible with non-NITROS ROS 2
nodes.

Follow these steps to integrate one or more NITROS-accelerated nodes
into your graph:

1. Follow the same steps introduced in the `previous
   section`__ to create
   a ``ComposableNodeContainer`` that contains all the
   NITROS-accelerated nodes with multi-thread enabled
   (i.e.Â ``executable='component_container_mt'``).

2. Place the created composable node container in ``LaunchDescription``
   together with your own, regular ROS 2 node or composable node
   container declarations.

Now the NITROS-accelerated nodes will be able to choose the best
compatible way to communicate with their adjacent nodes.

-  When connected to non-NITROS nodes, NITROS-accelerated nodes will
   function like regular ROS 2 nodes.
-  When connected to NITROS-accelerated nodes, zero-copy data
   transmission via type adaptation and type negotiation will be
   adopted.

Please visit the link below for an example graph that consists of
NITROS-accelerated and non-NITROS nodes:

-  `NITROS-accelerated AprilTag node + non-NITROS USB camera
   node <https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_apriltag/blob/main/docs/tutorial-usb-cam.md>`__

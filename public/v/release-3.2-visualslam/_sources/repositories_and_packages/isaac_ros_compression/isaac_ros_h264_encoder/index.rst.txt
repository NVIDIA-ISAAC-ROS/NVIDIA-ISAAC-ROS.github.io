==============
|package_name|
==============

:ir_github:`<isaac_ros_compression> <isaac_ros_h264_encoder>`

Quickstart
----------

Set Up Development Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /_snippets/set_up_dev_env.rst

Download Quickstart Assets
^^^^^^^^^^^^^^^^^^^^^^^^^^

1. Download quickstart data from NGC:

   :ir_assets:`<isaac_ros_h264_encoder> <quickstart.tar.gz>`

Build |package_name|
^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. tab:: Binary Package

      1. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      2. Install the prebuilt Debian package:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-h264-encoder
   
   .. tab:: Build from Source

      1. Clone this repository under ``${ISAAC_ROS_WS}/src``:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src && \
               git clone :ir_clone:`<isaac_ros_compression>`
     
      2. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      3. Use ``rosdep`` to install the package's dependencies:

         .. code:: bash

            rosdep update && rosdep install --from-paths ${ISAAC_ROS_WS}/src/isaac_ros_compression/isaac_ros_h264_encoder --ignore-src -y

      4. Build the package from source:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/ && \
               colcon build --symlink-install --packages-up-to isaac_ros_h264_encoder --base-paths ${ISAAC_ROS_WS}/src/isaac_ros_compression/isaac_ros_h264_encoder

      5. Source the ROS workspace:

         .. note::

            Make sure to repeat this step in **every** terminal created inside the Docker container.
            
            Because this package was built from source, the enclosing workspace must be sourced for ROS to be able to find the package's contents.

         .. code:: bash

            source install/setup.bash

Run Launch File
^^^^^^^^^^^^^^^

.. tabs::

   .. group-tab:: RealSense Camera

      #. Ensure that you have already set up your RealSense camera using the :doc:`RealSense setup tutorial </getting_started/hardware_setup/sensors/realsense_setup>`. If you have not, please set up the sensor and then restart this quickstart from the beginning.

      #. Continuing inside the container, install the following dependencies:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-examples ros-humble-isaac-ros-realsense

      #. Run the launch file. This launch file launches the example with the RealSense camera:

         .. code:: bash

            ros2 launch isaac_ros_examples isaac_ros_examples.launch.py launch_fragments:=realsense_stereo_rect,stereo_h264_encoder

   .. group-tab:: Hawk Camera
         
      #. Ensure that you have already set up your Hawk camera using the :doc:`Hawk setup tutorial </getting_started/hardware_setup/sensors/hawk_setup>`. If you have not, please set up the sensor and then restart this quickstart from the beginning.

      #. Continuing inside the container, install the following dependencies:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-examples ros-humble-isaac-ros-argus-camera

      #. Run the launch file. This launch file launches the example with the Argus camera:

         .. code:: bash

            ros2 launch isaac_ros_examples isaac_ros_examples.launch.py launch_fragments:=argus_stereo,rectify_stereo,stereo_h264_encoder

   .. group-tab:: ZED Camera

      #. Ensure that you have already set up your ZED camera using :doc:`ZED setup tutorial </getting_started/hardware_setup/sensors/zed_setup>`.

      #. Continuing inside the Docker container, install dependencies:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-examples ros-humble-isaac-ros-stereo-image-proc ros-humble-isaac-ros-zed

      #. Run the following launch file to spin up a demo of this package using a ZED Camera:

         .. code:: bash

            ros2 launch isaac_ros_examples isaac_ros_examples.launch.py \
            launch_fragments:=zed_stereo_rect,stereo_h264_encoder \
            interface_specs_file:=${ISAAC_ROS_WS}/isaac_ros_assets/isaac_ros_h264_encoder/zed2_quickstart_interface_specs.json
         
         .. note::
            
            If you are using the `ZED X` series, replace  `zed2_quickstart_interface_specs.json` with `zedx_quickstart_interface_specs.json` in the above command.


Visualize Results
^^^^^^^^^^^^^^^^^

.. note::

   Visualization is **optional**. To visualize the encoded output, you need to complete the :ref:`Isaac ROS H264 decoder <repositories_and_packages/isaac_ros_compression/isaac_ros_h264_decoder/index:quickstart>`.

1. Open a **new** terminal inside the Docker container:

   .. code:: bash

      cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
         ./scripts/run_dev.sh

   .. tabs::
      .. group-tab:: RealSense Camera

         2. Decode and visualize the images:

            .. code:: bash

               ros2 launch isaac_ros_examples isaac_ros_examples.launch.py launch_fragments:=stereo_h264_decoder
            
            .. code:: bash

               ros2 run image_view image_view --ros-args -r image:=/left/image_uncompressed

            .. code:: bash

               ros2 run image_view image_view --ros-args -r image:=/right/image_uncompressed

            For example, the result looks like:

            .. figure:: :ir_lfs:`<resources/isaac_ros_docs/concepts/compression/h264/realsense_example.png>`
               :align: center

      .. group-tab:: Hawk Camera

         2. Decode and visualize the images:

            .. code:: bash

               ros2 launch isaac_ros_examples isaac_ros_examples.launch.py launch_fragments:=stereo_h264_decoder

            .. code:: bash

               ros2 run image_view image_view --ros-args -r image:=/left/image_uncompressed

            .. code:: bash

               ros2 run image_view image_view --ros-args -r image:=/right/image_uncompressed

            For example, the result looks like:

            .. figure:: :ir_lfs:`<resources/isaac_ros_docs/concepts/compression/h264/argus_example.png>`
               :align: center

      .. group-tab:: ZED Camera

         2. Decode and visualize the images:

            .. code:: bash

               ros2 launch isaac_ros_examples isaac_ros_examples.launch.py launch_fragments:=stereo_h264_decoder

            .. code:: bash

               ros2 run image_view image_view --ros-args -r image:=/left/image_uncompressed

            .. code:: bash

               ros2 run image_view image_view --ros-args -r image:=/right/image_uncompressed

API
----

ROS Parameters
^^^^^^^^^^^^^^

=================== =============== ============== =====================================================================================================================================================================================================================================================================================================================
ROS Parameter       Type            Default        Description
=================== =============== ============== =====================================================================================================================================================================================================================================================================================================================
``input_width``     ``uint32_t``    ``1920``       The width of the input image.
``input_height``    ``uint32_t``    ``1200``       The height of the input image.
``qp``              ``uint32_t``    ``20``         The encoder constant QP value.
``hw_preset``       ``uint32_t``    ``0``          The encoder hardware preset type. The value can be an integer from ``0`` to ``3``, representing ``Ultrafast``, ``Fast``, ``Medium`` and, ``Slow``, respectively.
``profile``         ``uint32_t``    ``0``          The profile to be used for encoding. The value can be an integer from ``0`` to ``2``, representing ``Main``, ``Baseline``, and ``High``, respectively.
``iframe_interval`` ``int32_t``     ``5``          Interval between two I frames, in number of frames. E.g., ``iframe_interval=5`` represents ``IPPPPI...``, ``iframe_interval=1`` represents I frame only
``config``          ``std::string`` ``pframe_cqp`` A preset combination of ``qp``, ``hw_preset``, ``profile`` and ``iframe_interval``. The value can be ``iframe_cqp``, ``pframe_cqp`` or ``custom``. When ``iframe_cqp`` or ``pframe_cqp`` is used, the default value of these four parameters will be applied. Only when this field is ``custom`` will the custom values will be used.
=================== =============== ============== =====================================================================================================================================================================================================================================================================================================================

ROS Topics Subscribed
^^^^^^^^^^^^^^^^^^^^^

============= ======================================================================================================= ================
ROS Topic     Type                                                                                                    Description
============= ======================================================================================================= ================
``image_raw`` `sensor_msgs/Image <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/Image.msg>`__ Raw input image.
============= ======================================================================================================= ================

.. warning::

   All input images are required to have height and width that are both an even number of pixels.

ROS Topics Published
^^^^^^^^^^^^^^^^^^^^

==================== =========================================================================================================================== =======================
ROS Topic            Interface                                                                                                                   Description
==================== =========================================================================================================================== =======================
``image_compressed`` `sensor_msgs/CompressedImage <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/CompressedImage.msg>`__ H.264 compressed image.
==================== =========================================================================================================================== =======================

Input Restrictions
^^^^^^^^^^^^^^^^^^

1. The input image resolution must be the same as the dimension you
   provided, and the resolution must be **no larger than
   ``1920x1200``**.
2. The input image should be in ``rgb8`` or ``bgr8`` format, and it will
   be converted to ``nv12`` format before being sent to the encoder.

Output Interpretations
^^^^^^^^^^^^^^^^^^^^^^

1. The encoder could perform All-I frame or P-frame encoding and output
   the H.264 compressed data. The input and output are one-to-one
   mapped.

.. |package_name| replace:: ``isaac_ros_h264_encoder``
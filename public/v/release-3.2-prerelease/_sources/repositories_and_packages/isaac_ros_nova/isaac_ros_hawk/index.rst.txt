==============
|package_name|
==============

:ir_github:`<isaac_ros_nova> <isaac_ros_hawk>`

.. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nova/li_hawk_ar0234cs-stereo.png>`
   :align: center

Overview
--------

A camera provides images using an electronic image sensor as part of perception for understanding of the robot and its environment. A stereo camera provides images from two slightly different perspectives which can be used to compute precise depth.

The ``isaac_ros_hawk`` driver provides support for the ``LI-AR0234CS-STEREO-GMSL2-30`` stereo camera with IMU. This provides an wide-angle (>120 degree) field of view with two global shutter HD (1920x1200) color imagers. Global shutter enables light sensing in the imager for all pixels simultaneously, reducing motion artifacts caused by rolling-shutter imagers which capture a row of pixels at a time. The stereo imagers are time-synchronized to capture simultaneously allowing for computation of precise depth. This design has the benefit that the same imager can be used to provide depth and color information for AI-based perception functions, where other designs have parallax errors as depth and color come from different sensors reducing accuracy for AI-based perception. ``LI-AR0234CS-STEREO-GMSL2-30`` is jointly developed with Leopard Imaging and NVIDIA.

Quickstart
----------

Set Up Nova
^^^^^^^^^^^

.. include:: /../shared/_snippets/nova_orin_install.rst

Set Up Development Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. include:: /_snippets/set_up_dev_env_nova.rst

Build |package_name|
^^^^^^^^^^^^^^^^^^^^

.. tabs::

   .. tab:: Binary Package

      1. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      2. Install the prebuilt Debian package:

         :ir_apt:

         .. code:: bash

            sudo apt-get install -y ros-humble-isaac-ros-hawk

   .. tab:: Build from Source

      1. Clone this repository under ``${ISAAC_ROS_WS}/src``:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src && \
               git clone :ir_clone:`<isaac_ros_nova>`

      2. Launch the Docker container using the ``run_dev.sh`` script:

         .. code:: bash

            cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
            ./scripts/run_dev.sh

      3. Use ``rosdep`` to install the package's dependencies:

         :ir_apt:

         .. code:: bash

            rosdep update && rosdep install --from-paths ${ISAAC_ROS_WS}/src/isaac_ros_nova/isaac_ros_hawk --ignore-src -y

      4. Build the package from source:

         .. code:: bash

            cd ${ISAAC_ROS_WS} && \
               colcon build --symlink-install --packages-up-to isaac_ros_hawk --base-paths ${ISAAC_ROS_WS}/src/isaac_ros_nova/isaac_ros_hawk

      5. Source the ROS workspace:

         .. note::

            Make sure to repeat this step in **every** terminal created inside the Docker container.

            Because this package was built from source, the enclosing workspace must be sourced for ROS to be able to find the package's contents.

         .. code:: bash

            source install/setup.bash

Run Launch File
^^^^^^^^^^^^^^^

1. Continuing inside the Docker container, run the following launch file to spin up a demo of this package:

   .. code:: bash

      cd ${ISAAC_ROS_WS} && \
        ros2 launch isaac_ros_hawk hawk.launch.py

Visualize Results
^^^^^^^^^^^^^^^^^

1. Open a **new** terminal inside the Docker container:

   .. code:: bash

      cd ${ISAAC_ROS_WS}/src/isaac_ros_common && \
         ./scripts/run_dev.sh

2. Visualize and validate the output of the package using ``rviz``:

   .. figure:: :ir_lfs:`<resources/isaac_ros_docs/repositories_and_packages/isaac_ros_nova/hawk_raw.png>`
      :alt: Rviz showing hawk images
      :align: center

API
----

Usage
^^^^^

.. code:: bash

   ros2 launch isaac_ros_hawk hawk.launch.py target_container:=<Target Container> namespace:=<Namespace> module_id:=<Index specifying the camera module to use.> mode:=<Supported Resolution mode from the camera. For example, 0: 1920 x 1200> fsync_type:=<Specifies what kind of Frame Synchronization to use. Supported values are: 0 for internal, 1 for external.> wide_fov:=<Specifies FoV mode. Supported values are: 0 normal, 1 for wide.> nvpps_dev_file:=<NVPPS Dev Name> use_time_since_epoch:=<Use Time Since Epoch>

HawkNode
^^^^^^^^

ROS Parameters
~~~~~~~~~~~~~~

============================ ================ =================== ===========================================================================================================================================================================================
ROS Parameter                Type             Default             Description
============================ ================ =================== ===========================================================================================================================================================================================
``camera_id``                ``uint``         ``0``               The video device index E.g. ``/dev/video0``
``module_id``                ``uint``         ``0``               The camera module index in the device tree when there is more than one of the same camera module connected
``mode``                     ``uint``         ``0``               The resolution mode supported by the camera sensor and driver. Currently only 1920x1200 (mode 0) is supported.
``fsync_type``               ``uint``         ``1``               Specifies what kind of Frame Synchronization to use, supported values are 0 for internal and 1 for external. For e3653 boards (carter 2.3) choose 0, for p3762 boards (carter 2.4) choose 1
``camera_type``              ``uint``         ``0``               0 for Monocular type camera.
``camera_link_frame_name``   ``string``       ``camera``          The frame name associated with the origin of the camera body.
``left_camera_frame_name``   ``string``       ``left_cam``        The frame name associated with the left imager inside camera body.
``right_camera_frame_name``  ``string``       ``right_cam``       The frame name associated with the right imager inside camera body.
``left_camera_info_url``     ``string``       N/A                 Optional URL of a camera info ``.yaml`` file to read intrinsic information.
``right_camera_info_url``    ``string``       N/A                 Optional URL of a camera info ``.yaml`` file to read intrinsic information.
============================ ================ =================== ===========================================================================================================================================================================================

ROS Topics Subscribed
~~~~~~~~~~~~~~~~~~~~~

.. list-table::
   :header-rows: 1

   * - ROS Topic
     - Interface
     - Description

   * - ``correlated_timestamp``
     - :ir_repo:`isaac_ros_nova_interfaces::msg::CorrelatedTimestamp <isaac_ros_common> <isaac_ros_nova_interfaces/msg/CorrelatedTimestamp.msg>`
     - Timestamp correlation data.

ROS Topics Published
~~~~~~~~~~~~~~~~~~~~

===================== ================================================================================================================= =================================
ROS Topic             Interface                                                                                                         Description
===================== ================================================================================================================= =================================
``left/image_raw``    `sensor_msgs/Image <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/Image.msg>`__           The left image of a stereo pair.
``left/camera_info``  `sensor_msgs/CameraInfo <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/CameraInfo.msg>`__ The left camera model.
``right/image_raw``   `sensor_msgs/Image <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/Image.msg>`__           The right image of a stereo pair.
``right/camera_info`` `sensor_msgs/CameraInfo <https://github.com/ros2/common_interfaces/blob/humble/sensor_msgs/msg/CameraInfo.msg>`__ The right camera model.
===================== ================================================================================================================= =================================

Troubleshooting
---------------

.. include:: /repositories_and_packages/isaac_ros_nova/isaac_ros_hawk/troubleshooting_argus.rst


If you want to restart the daemon from a script and from within the container, there is service installed with nova-init that will listen on a socket to restart
the daemon. You can use the following python snippet in your launch files or elsewhere to achieve this:

.. code-block:: python

    import socket
    s=socket.socket(socket.AF_UNIX)
    s.connect('/tmp/argus_restart_socket')
    s.send(b'RESTART_SERVICE'); s.close()


.. |package_name| replace:: ``isaac_ros_hawk``
